on:
  push:
    # Sequence of patterns matched against refs/tags
    #tags:
    #- 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_on_centos:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 20
      matrix:
        target: [base,bin,chain,chainbin,cudadecoder,cudadecoderbin,cudafeat,cudafeatbin,cudamatrix,decoder,doc,feat,featbin,fgmmbin,fstbin,fstext,gmm,gmmbin,gst-plugin,hmm,itf,ivector,ivectorbin,kws,kwsbin,lat,latbin,lm,lmbin,makefiles,matrix,nnet,nnet2,nnet2bin,nnet3,nnet3bin,nnetbin,online,online2,online2bin,onlinebin,probe,rnnlm,rnnlmbin,sgmm2,sgmm2bin,tfrnnlm,tfrnnlmbin,transform,tree,util]
    container:
      image: centos:7
      env:
        CC: /opt/rh/devtoolset-7/root/usr/bin/gcc
        CXX: /opt/rh/devtoolset-7/root/usr/bin/g++
        MAKE: /opt/rh/devtoolset-7/root/usr/bin/make
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: Install dependencies
        run: |
          yum install -y centos-release-scl
          yum-config-manager --enable rhel-server-rhscl-7-rpms
          yum install -y devtoolset-7-gcc-c++ devtoolset-7-make devtoolset-7-gcc-gfortran
          yum install -y sox ncurses-devel libtool automake autoconf git subversion
          yum install -y bzip2 wget which unzip bc patch python2
          yum install -y zlib-devel
          yum install -y sudo
      - name: run.sh
        shell: bash
        run: |
          PATH="/opt/rh/devtoolset-7/root/usr/bin:${PATH:-}" ./run.sh ${{ github.ref }}
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          rm -r kaldi/src/${{ github.ref }}/*.cc kaldi/src/${{ github.ref }}/*.o
          tar -zcvf kaldi-${{ github.ref }}-linux-x64-libc2_17.tar.gz kaldi/src/${{ github.ref }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: kaldi-${{ github.ref }}-linux-x64-libc2_17.tar.gz
          asset_name: kaldi-${{ github.ref }}-linux-x64-libc2_17.tar.gz
          asset_content_type: application/gzip
